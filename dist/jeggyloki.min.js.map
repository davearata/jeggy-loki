{"version":3,"file":"jeggyloki.js","sources":["jeggyloki.js","/source/jeggyloki.js"],"names":["global","factory","exports","module","require","define","amd","jeggyloki","jeggy","_","Loki","this","buildLokiQuery","query","arrayKeys","reduce","result","value","key","contains","$contains","keys","length","queryArray","map","queryKey","$and","buildLokiIdQuery","idKey","id","applyProjection","doc","projection","projectionArr","split","includes","assign","each","projectionKey","trim","omit","LokiCollection","_jeggy$Collection","name","nativeLokiCollection","_get","Object","getPrototypeOf","prototype","call","Error","_Promise","resolve","reject","isUndefined","find","clone","isString","error","then","isArray","findOne","createdDoc","insert","docs","createdDocs","removeWhere","foundDoc","isEmpty","remove","update","Collection","populateDoc","fieldKey","collection","isNull","array","populatedArray","promises","itemId","findById","push","all","LokiAdapter","_jeggy$Adapter","loki","collections","undefined","lokiCollection","addCollection","collectionName","_this","getCollection","Adapter"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jeggy'), require('lodash'), require('lokijs')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jeggy', 'lodash', 'lokijs'], factory) :\n  factory((global.jeggyloki = {}), global.jeggy, global._, global.Loki)\n}(this, function (exports, jeggy, _, Loki) { 'use strict';\n\n  _ = ('default' in _ ? _['default'] : _);\n  Loki = ('default' in Loki ? Loki['default'] : Loki);\n\n  const buildLokiQuery = function buildLokiQuery(query, arrayKeys) {\n    query = _.reduce(query, (result, value, key) => {\n      if(_.contains(arrayKeys, key)) {\n        result[key] = {$contains: value};\n      } else {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n\n    if (_.keys(query).length > 1) {\n      const queryArray = _.map(_.keys(query), (queryKey) => {\n        const result = {};\n        result[queryKey] = query[queryKey];\n        return result;\n      });\n      query = {$and: queryArray};\n    }\n    return query;\n  };\n\n  const buildLokiIdQuery = function buildLokiIdQuery(idKey, id) {\n    const query = {};\n    query[idKey] = id;\n    return query;\n  };\n\n  const applyProjection = function applyProjection(doc, projection) {\n    let result = {};\n    const projectionArr = projection.split(' ');\n    if (_.includes(projection, '-')) {\n      //take all fields excepts ones excluded\n      result = _.assign(result, doc);\n      _.each(projectionArr, (projectionKey) => {\n        if (_.includes(projectionKey, '-')) {\n          projectionKey = _.trim(projectionKey, '-');\n          result = _.omit(result, projectionKey);\n        }\n      });\n    } else {\n      //only take fields specified\n      _.each(projectionArr, (projectionKey) => {\n        if (_.includes(projectionKey, '+')) {\n          projectionKey = _.trim(projectionKey, '+');\n        }\n        result[projectionKey] = doc[projectionKey];\n      });\n    }\n\n    return result;\n  };\n\n  class LokiCollection extends jeggy.Collection {\n    constructor(name, nativeLokiCollection, idKey, arrayKeys) {\n      super(name);\n      if (!nativeLokiCollection) {\n        throw new Error('a LokiCollection must be intiialized with a native lokiJS collection');\n      }\n      this.nativeLokiCollection = nativeLokiCollection;\n      this.idKey = idKey || '_id';\n      this.arrayKeys = arrayKeys;\n    }\n\n    find(query, projection) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const arrayKeys = this.arrayKeys;\n      return new Promise((resolve, reject) => {\n        try {\n          query = buildLokiQuery(query, arrayKeys);\n          if (_.isUndefined(query)) {\n            query = {};\n          }\n          let result = nativeLokiCollection.find(query);\n          if (result !== null) {\n            result = _.clone(result, true);\n            if (_.isString(projection)) {\n              result = _.map(result, (doc) => {\n                return applyProjection(doc, projection);\n              });\n            }\n          }\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    findOne(query, projection) {\n      return this.find(query, projection)\n        .then(result => {\n          if (_.isArray(result)) {\n            result = result[0];\n          }\n\n          return result;\n        });\n    }\n\n    findById(id, projection) {\n      const query = buildLokiIdQuery(this.idKey, id);\n      return this.findOne(query, projection);\n    }\n\n    create(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      return new Promise((resolve, reject) => {\n        try {\n          const createdDoc = nativeLokiCollection.insert(doc);\n          if (createdDoc === null) {\n            return resolve(createdDoc);\n          }\n          resolve(_.assign({}, createdDoc));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    insertMany(docs) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      return new Promise((resolve, reject) => {\n        try {\n          const createdDocs = nativeLokiCollection.insert(docs);\n          if (createdDocs === null) {\n            return resolve(createdDocs);\n          }\n          resolve(_.clone(createdDocs, true));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    removeWhere(query) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const arrayKeys = this.arrayKeys;\n      return new Promise((resolve, reject) => {\n        try {\n          query = buildLokiQuery(query, arrayKeys);\n          resolve(nativeLokiCollection.removeWhere(query));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    remove(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const query = buildLokiIdQuery(this.idKey, doc[this.idKey]);\n      return new Promise((resolve, reject) => {\n        try {\n          const foundDoc = _.assign({}, nativeLokiCollection.findOne(query));\n          if (_.isEmpty(foundDoc)) {\n            reject(new Error('unknown doc id:' + doc.id));\n          }\n          resolve(nativeLokiCollection.remove(doc));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    update(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const idKey = this.idKey;\n      const query = buildLokiIdQuery(idKey, doc[idKey]);\n      return this.findOne(query)\n        .then(foundDoc => {\n          if (_.isEmpty(foundDoc)) {\n            throw new Error('unknown doc id:' + doc[idKey]);\n          }\n\n          foundDoc = _.assign(foundDoc, doc);\n          nativeLokiCollection.update(foundDoc);\n          return _.assign({}, foundDoc);\n        });\n    }\n  }\n\n  exports.LokiCollection = LokiCollection;\n\n  const populateDoc = function populateDoc(doc, fieldKey, collection) {\n    const id = doc[fieldKey];\n    if (_.isUndefined(id) || _.isNull(id)) {\n      return Promise.resolve();\n    }\n\n    if (_.isArray(id)) {\n      const array = id;\n      const populatedArray = [];\n      const promises = _.map(array, (itemId) => {\n        return collection.findById(itemId)\n          .then((foundDoc) => {\n            if (!foundDoc) {\n              throw new Error('population  failed');\n            }\n\n            populatedArray.push(foundDoc);\n          });\n      });\n      return Promise.all(promises)\n        .then(() => {\n          doc[fieldKey] = populatedArray;\n          return doc;\n        });\n    }\n\n    return collection.findById(id)\n      .then((foundDoc) => {\n        if (!foundDoc) {\n          throw new Error('population  failed');\n        }\n\n        doc[fieldKey] = foundDoc;\n      });\n  };\n\n  class LokiAdapter extends jeggy.Adapter {\n    constructor(loki) {\n      super();\n      if (_.isString(loki)) {\n        loki = new Loki(loki);\n      }\n\n      this.loki = loki;\n      this.collections = {};\n    }\n\n    addCollection(name, idKey, arrayKeys) {\n      let collection;\n      if (name instanceof LokiCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const lokiCollection = this.loki.addCollection(name);\n        collection = new LokiCollection(name, lokiCollection, idKey, arrayKeys);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey, collectionName) {\n      try {\n        if (!docs) {\n          return Promise.reject(new Error('tried to populate a null value'));\n        }\n\n        const collection = this.getCollection(collectionName);\n\n        if (!_.isArray(docs)) {\n          docs = [docs];\n        }\n\n        const promises = _.map(docs, doc => {\n          return populateDoc(doc, fieldKey, collection);\n        });\n\n        return Promise.all(promises)\n          .then(() => {\n            return docs;\n          });\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  exports.LokiAdapter = LokiAdapter;\n\n\n\n}));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jeggy'), require('lodash'), require('lokijs')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jeggy', 'lodash', 'lokijs'], factory) :\n  factory((global.jeggyloki = {}), global.jeggy, global._, global.Loki)\n}(this, function (exports, jeggy, _, Loki) { 'use strict';\n\n  _ = ('default' in _ ? _['default'] : _);\n  Loki = ('default' in Loki ? Loki['default'] : Loki);\n\n  const buildLokiQuery = function buildLokiQuery(query, arrayKeys) {\n    query = _.reduce(query, (result, value, key) => {\n      if(_.contains(arrayKeys, key)) {\n        result[key] = {$contains: value};\n      } else {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n\n    if (_.keys(query).length > 1) {\n      const queryArray = _.map(_.keys(query), (queryKey) => {\n        const result = {};\n        result[queryKey] = query[queryKey];\n        return result;\n      });\n      query = {$and: queryArray};\n    }\n    return query;\n  };\n\n  const buildLokiIdQuery = function buildLokiIdQuery(idKey, id) {\n    const query = {};\n    query[idKey] = id;\n    return query;\n  };\n\n  const applyProjection = function applyProjection(doc, projection) {\n    let result = {};\n    const projectionArr = projection.split(' ');\n    if (_.includes(projection, '-')) {\n      //take all fields excepts ones excluded\n      result = _.assign(result, doc);\n      _.each(projectionArr, (projectionKey) => {\n        if (_.includes(projectionKey, '-')) {\n          projectionKey = _.trim(projectionKey, '-');\n          result = _.omit(result, projectionKey);\n        }\n      });\n    } else {\n      //only take fields specified\n      _.each(projectionArr, (projectionKey) => {\n        if (_.includes(projectionKey, '+')) {\n          projectionKey = _.trim(projectionKey, '+');\n        }\n        result[projectionKey] = doc[projectionKey];\n      });\n    }\n\n    return result;\n  };\n\n  class LokiCollection extends jeggy.Collection {\n    constructor(name, nativeLokiCollection, idKey, arrayKeys) {\n      super(name);\n      if (!nativeLokiCollection) {\n        throw new Error('a LokiCollection must be intiialized with a native lokiJS collection');\n      }\n      this.nativeLokiCollection = nativeLokiCollection;\n      this.idKey = idKey || '_id';\n      this.arrayKeys = arrayKeys;\n    }\n\n    find(query, projection) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const arrayKeys = this.arrayKeys;\n      return new Promise((resolve, reject) => {\n        try {\n          query = buildLokiQuery(query, arrayKeys);\n          if (_.isUndefined(query)) {\n            query = {};\n          }\n          let result = nativeLokiCollection.find(query);\n          if (result !== null) {\n            result = _.clone(result, true);\n            if (_.isString(projection)) {\n              result = _.map(result, (doc) => {\n                return applyProjection(doc, projection);\n              });\n            }\n          }\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    findOne(query, projection) {\n      return this.find(query, projection)\n        .then(result => {\n          if (_.isArray(result)) {\n            result = result[0];\n          }\n\n          return result;\n        });\n    }\n\n    findById(id, projection) {\n      const query = buildLokiIdQuery(this.idKey, id);\n      return this.findOne(query, projection);\n    }\n\n    create(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      return new Promise((resolve, reject) => {\n        try {\n          const createdDoc = nativeLokiCollection.insert(doc);\n          if (createdDoc === null) {\n            return resolve(createdDoc);\n          }\n          resolve(_.assign({}, createdDoc));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    insertMany(docs) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      return new Promise((resolve, reject) => {\n        try {\n          const createdDocs = nativeLokiCollection.insert(docs);\n          if (createdDocs === null) {\n            return resolve(createdDocs);\n          }\n          resolve(_.clone(createdDocs, true));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    removeWhere(query) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const arrayKeys = this.arrayKeys;\n      return new Promise((resolve, reject) => {\n        try {\n          query = buildLokiQuery(query, arrayKeys);\n          resolve(nativeLokiCollection.removeWhere(query));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    remove(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const query = buildLokiIdQuery(this.idKey, doc[this.idKey]);\n      return new Promise((resolve, reject) => {\n        try {\n          const foundDoc = _.assign({}, nativeLokiCollection.findOne(query));\n          if (_.isEmpty(foundDoc)) {\n            reject(new Error('unknown doc id:' + doc.id));\n          }\n          resolve(nativeLokiCollection.remove(doc));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    update(doc) {\n      const nativeLokiCollection = this.nativeLokiCollection;\n      const idKey = this.idKey;\n      const query = buildLokiIdQuery(idKey, doc[idKey]);\n      return this.findOne(query)\n        .then(foundDoc => {\n          if (_.isEmpty(foundDoc)) {\n            throw new Error('unknown doc id:' + doc[idKey]);\n          }\n\n          foundDoc = _.assign(foundDoc, doc);\n          nativeLokiCollection.update(foundDoc);\n          return _.assign({}, foundDoc);\n        });\n    }\n  }\n\n  exports.LokiCollection = LokiCollection;\n\n  const populateDoc = function populateDoc(doc, fieldKey, collection) {\n    const id = doc[fieldKey];\n    if (_.isUndefined(id) || _.isNull(id)) {\n      return Promise.resolve();\n    }\n\n    if (_.isArray(id)) {\n      const array = id;\n      const populatedArray = [];\n      const promises = _.map(array, (itemId) => {\n        return collection.findById(itemId)\n          .then((foundDoc) => {\n            if (!foundDoc) {\n              throw new Error('population  failed');\n            }\n\n            populatedArray.push(foundDoc);\n          });\n      });\n      return Promise.all(promises)\n        .then(() => {\n          doc[fieldKey] = populatedArray;\n          return doc;\n        });\n    }\n\n    return collection.findById(id)\n      .then((foundDoc) => {\n        if (!foundDoc) {\n          throw new Error('population  failed');\n        }\n\n        doc[fieldKey] = foundDoc;\n      });\n  };\n\n  class LokiAdapter extends jeggy.Adapter {\n    constructor(loki) {\n      super();\n      if (_.isString(loki)) {\n        loki = new Loki(loki);\n      }\n\n      this.loki = loki;\n      this.collections = {};\n    }\n\n    addCollection(name, idKey, arrayKeys) {\n      let collection;\n      if (name instanceof LokiCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const lokiCollection = this.loki.addCollection(name);\n        collection = new LokiCollection(name, lokiCollection, idKey, arrayKeys);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey, collectionName) {\n      try {\n        if (!docs) {\n          return Promise.reject(new Error('tried to populate a null value'));\n        }\n\n        const collection = this.getCollection(collectionName);\n\n        if (!_.isArray(docs)) {\n          docs = [docs];\n        }\n\n        const promises = _.map(docs, doc => {\n          return populateDoc(doc, fieldKey, collection);\n        });\n\n        return Promise.all(promises)\n          .then(() => {\n            return docs;\n          });\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  exports.LokiAdapter = LokiAdapter;\n\n\n\n}));\n"]}